# | Kh√≠a c·∫°nh                      | JavaScript                                  | Python                                                |
# | ------------------------------ | ------------------------------------------- | ----------------------------------------------------- |
# | C∆° ch·∫ø k·∫ø th·ª´a                 | D·ª±a tr√™n `prototype chain`                  | D·ª±a tr√™n `class`, `__mro__` (method resolution order) |
# | G·ªëc t·ªï                         | `Object.prototype`                          | `object` (si√™u l·ªõp c·ªßa m·ªçi class)                     |
# | C√°ch t·∫°o l·ªõp                   | `function A() {}` + `A.prototype.xxx = ...` | `class A:` + method trong `def`                       |
# | C√≥ th·ªÉ th√™m method sau khi t·∫°o | ‚úÖ R·∫•t d·ªÖ                                    | ‚úÖ R·∫•t d·ªÖ (`ClassName.new_method = ...`)               |
# | C√≥ th·ªÉ ghi ƒë√® method m·∫∑c ƒë·ªãnh  | ‚úÖ Tho·∫£i m√°i (ghi v√†o prototype)             | ‚úÖ Monkey patch ƒë∆∞·ª£c lu√¥n                              |

# üîù T·∫ßng 3: H√†m ƒë·∫∑c bi·ªát / Th∆∞ vi·ªán Python
#     ‚§∑ V√≠ d·ª•: __init__(), __len__(), print(), sum(), range(), int(), float(), list(), class, def...

# üîº T·∫ßng 2: C√¢u l·ªánh Python c∆° b·∫£n
#     ‚§∑ V√≠ d·ª•: if, for, while, =, +, -, *, and, or, return...

# üîº T·∫ßng 1: Bytecode Python (compile t·ª´ code source)
#     ‚§∑ V√≠ d·ª•: LOAD_FAST, CALL_FUNCTION, RETURN_VALUE...

# üîº T·∫ßng 0: Ng√¥n ng·ªØ m√°y / Assembly / Nh·ªã ph√¢n
#     ‚§∑ MOV, JMP, CALL, PUSH/POP, ho·∫∑c m√£ nh·ªã ph√¢n tr·ª±c ti·∫øp (010101...)

